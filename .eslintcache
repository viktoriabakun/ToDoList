[{"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\reportWebVitals.ts":"1","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"2","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\features\\TodolistsList\\tasks-reducer.ts":"3","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\components\\AddItemForm\\AddItemForm.tsx":"4","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\app\\App.tsx":"5","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\index.tsx":"6","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\features\\TodolistsList\\todolists-reducer.ts":"7","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\app\\store.ts":"8","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\components\\EditableSpan\\EditableSpan.tsx":"9","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\app\\app-reducer.ts":"10"},{"size":425,"mtime":1611831267192,"results":"11","hashOfConfig":"12"},{"size":1773,"mtime":1611831267646,"results":"13","hashOfConfig":"12"},{"size":5693,"mtime":1614418286027,"results":"14","hashOfConfig":"12"},{"size":1869,"mtime":1614417230268,"results":"15","hashOfConfig":"12"},{"size":2900,"mtime":1614417421154,"results":"16","hashOfConfig":"12"},{"size":1162,"mtime":1614417572470,"results":"17","hashOfConfig":"12"},{"size":4585,"mtime":1614418333069,"results":"18","hashOfConfig":"12"},{"size":1182,"mtime":1611856409773,"results":"19","hashOfConfig":"12"},{"size":952,"mtime":1611831267442,"results":"20","hashOfConfig":"12"},{"size":2118,"mtime":1611859738784,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uupupj",{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\reportWebVitals.ts",[],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["43","44","45"],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\features\\TodolistsList\\tasks-reducer.ts",["46"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { [action.todolist.id]: [], ...state}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            // delete copyState[action.id]\r\n            // с этой строчкой выдаёт ошибку\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\components\\AddItemForm\\AddItemForm.tsx",["47","48","49"],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\app\\App.tsx",["50","51","52"],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\index.tsx",["53","54"],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\features\\TodolistsList\\todolists-reducer.ts",["55"],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\app\\store.ts",[],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"Q:\\PROG\\_MAIN_\\TDLIST_01\\src\\app\\app-reducer.ts",[],{"ruleId":"56","severity":1,"message":"57","line":15,"column":97,"nodeType":"58","endLine":15,"endColumn":130,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"57","line":20,"column":8,"nodeType":"58","endLine":20,"endColumn":41,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"57","line":24,"column":8,"nodeType":"58","endLine":24,"endColumn":41,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":13,"column":94,"nodeType":"64","messageId":"65","endLine":13,"endColumn":96},{"ruleId":"66","severity":1,"message":"67","line":4,"column":8,"nodeType":"68","messageId":"69","endLine":4,"endColumn":22},{"ruleId":"66","severity":1,"message":"70","line":5,"column":8,"nodeType":"68","messageId":"69","endLine":5,"endColumn":11},{"ruleId":"66","severity":1,"message":"71","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":13},{"ruleId":"66","severity":1,"message":"72","line":11,"column":5,"nodeType":"68","messageId":"69","endLine":11,"endColumn":15},{"ruleId":"66","severity":1,"message":"73","line":18,"column":26,"nodeType":"68","messageId":"69","endLine":18,"endColumn":42},{"ruleId":"56","severity":1,"message":"74","line":42,"column":8,"nodeType":"58","endLine":42,"endColumn":10,"suggestions":"75"},{"ruleId":"66","severity":1,"message":"71","line":10,"column":8,"nodeType":"68","messageId":"69","endLine":10,"endColumn":13},{"ruleId":"66","severity":1,"message":"70","line":11,"column":8,"nodeType":"68","messageId":"69","endLine":11,"endColumn":11},{"ruleId":"62","severity":1,"message":"63","line":10,"column":45,"nodeType":"64","messageId":"65","endLine":10,"endColumn":47},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["76"],["77"],["78"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","'red' is defined but never used.","'green' is defined but never used.","'Typography' is defined but never used.","'InitialStateType' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["79"],{"desc":"80","fix":"81"},{"desc":"80","fix":"82"},{"desc":"80","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [props]",{"range":"86","text":"87"},{"range":"88","text":"87"},{"range":"89","text":"87"},"Update the dependencies array to be: [dispatch]",{"range":"90","text":"91"},[765,798],"[props]",[1071,1104],[1261,1294],[1423,1425],"[dispatch]"]